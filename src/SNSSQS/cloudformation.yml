AWSTemplateFormatVersion: '2010-09-09'
Resources:
  YanyanKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: An example symmetric CMK
      KeySpec: RSA_4096
      PendingWindowInDays: 20
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: arn:aws:iam::160071257600:root
            Action: kms:*
            Resource: '*'
          - Sid: Allow administration of the key
            Effect: Allow
            Principal: '*'
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Resource: '*'
          - Sid: decrypt
            Effect: Allow
            Principal: '*'
            Action:
              - kms:GenerateDataKey*
              - kms:Decrypt
            Resource: '*'
            
  YanyanQueueDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "Yanyan-queue-DLQ"
      
  YanyanQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "yanyan-queue"
      MessageRetentionPeriod: 432000
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt YanyanQueueDLQ.Arn
        maxReceiveCount: 3
  
  YanyanLamdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: YanyanLamdaFunctionRoleName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowLambdaToAssumeRole
            Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
      Policies:
        - PolicyName: lambda-dlq-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ChangeMessageVisibility
                  - sqs:DeleteMessage
                  - sqs:SendMessage
                  - sqs:GetQueueAttributes
                  - sqs:ReceiveMessage
                Resource: 
                  - !GetAtt 'YanyanLamdaFunctionForSQSDLQ.Arn'
                  - !GetAtt 'YanyanLamdaFunctionForSnsDLQ.Arn'
#      Policies:
#        - PolicyName: AllowPublishToPartnerPlatformDomainEventTopic
#          PolicyDocument:
#            Version: '2012-10-17'
#            Statement:
#              - Effect: Allow
#                Action:
#                  - sns:Publish
#                Resource: !Ref PartnerPlatformNotificationTopicArn

  YanyanLamdaFunctionForSnsInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref YanyanLamdaFunctionForSns
      Principal: sns.amazonaws.com

  YanyanLamdaFunctionForSQSDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "YanyanLamdaFunctionForSQSDLQ"
      
  YanyanLamdaFunctionForSQS:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: YanyanLamdaFunctionForSQS
      Role: !GetAtt YanyanLamdaFunctionRole.Arn
      Runtime: nodejs12.x
      Handler: index.handler
      DeadLetterConfig:
        TargetArn: !GetAtt YanyanLamdaFunctionForSQSDLQ.Arn
      Code:
        ZipFile: !Sub |
          exports.handler = function(event, context) {
             console.log("message from SQS");
             console.log(JSON.stringify(event));
          }; 

  YanyanLamdaFunctionForSns:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: YanyanLamdaFunctionForSns
      Role: !GetAtt YanyanLamdaFunctionRole.Arn
      DeadLetterConfig:
        TargetArn: !GetAtt YanyanLamdaFunctionForSnsDLQ.Arn
      Runtime: nodejs12.x
      Handler: index.handler
      Code:
        ZipFile: !Sub |
          exports.handler = function(event, context) {
             console.log("message from SNS");
             console.log(JSON.stringify(event));
          }; 

  YanyanLamdaFunctionForSnsDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "YanyanLamdaFunctionForSnsDLQ"

  LambdaLogGroupForSqs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/YanyanLamdaFunctionForSQS
      RetentionInDays: 7
      
  LambdaLogGroupForSns:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/YanyanLamdaFunctionForSns
      RetentionInDays: 7     

  YanyanEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      Enabled: true
      EventSourceArn: !GetAtt YanyanQueue.Arn
      FunctionName: !GetAtt YanyanLamdaFunctionForSQS.Arn
       
  YanyanCloudWatchScheduledRule:
    Type: AWS::Events::Rule
    DeletionPolicy: Delete
    Properties:
      Description: "trigger sns every 1 minute"
      ScheduleExpression: "rate(1 minute)"
      State: "ENABLED"
      Targets:
        - Arn:
            Ref: "YanyanSNSTopic"
          Id: "OpsTopic"
          
  EventTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    DeletionPolicy: Delete
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: 'sns:Publish'
            Resource: '*'
      Topics:
        - !Ref YanyanSNSTopic 
          
  SnsToQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref YanyanQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: allow-sns-messages
            Effect: Allow
            Principal: '*'
            Resource: !GetAtt YanyanQueue.Arn
            Action: SQS:SendMessage
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref YanyanSNSTopic

  YanyanSNSTopic:
    Type: 'AWS::SNS::Topic'
    DeletionPolicy: Delete
    Properties:
      TopicName: 'yanyan-sns-topic'
      KmsMasterKeyId: !Ref YanyanKMSKey
      Tags:
        - Key: "projectCode"
          Value: "aswTraining"
        - Key: "owner"
          Value: "YanyanHuang"
      Subscription:
        - Endpoint: "yyhuang@thoughtworks.com"
          Protocol: email
#        - Endpoint: !GetAtt YanyanQueue.Arn
#          Protocol: sqs
        - Endpoint: !GetAtt YanyanLamdaFunctionForSns.Arn
          Protocol: lambda

# 貌似没用？？
  YanyanQueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref YanyanSNSTopic
      Endpoint: !GetAtt YanyanQueue.Arn
      Protocol: sqs
      RawMessageDelivery: true
      FilterPolicy: 
        pet:
          - dog
          
  YanyanAlarmTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: 'alarm-topic'
      Tags:
        - Key: "projectCode"
          Value: "aswTraining"
        - Key: "owner"
          Value: "YanyanHuang"
      Subscription:
        - Endpoint: "yyhuang@thoughtworks.com"
          Protocol: email 

  YanyanQueueDLQAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Alarm if dead letter queue depth grows beyond 1 message
      Namespace: AWS/SQS
      MetricName: ApproximateNumberOfMessagesVisible
      Dimensions:
        - Name: QueueName
          Value: !GetAtt YanyanQueueDLQ.QueueName
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      TreatMissingData: ignore
      ComparisonOperator: GreaterThanOrEqualToThreshold
      OKActions:
        - !Ref YanyanAlarmTopic
      AlarmActions:
        - !Ref YanyanAlarmTopic                    